{"version":3,"sources":["webpack:///./node_modules/setimmediate/setImmediate.js"],"names":["nextHandle","tasksByHandle","currentlyRunningATask","doc","registerImmediate","html","channel","attachTo","clearImmediate","handle","runIfPresent","setTimeout","task","callback","args","length","apply","undefined","run","installPostMessageImplementation","onGlobalMessage","event","source","global","data","indexOf","messagePrefix","slice","Math","random","addEventListener","attachEvent","postMessage","setImmediate","document","Object","getPrototypeOf","toString","call","process","nextTick","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","port2","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","Function","Array","arguments","i","self","this"],"mappings":"gFAAA,0CAGI,IAIIA,EACAC,EACAC,EACAC,EACAC,EA6HIC,EAZAC,EAmCRC,EAjIA,SAASC,EAAeC,UACbR,EAAcQ,GAyBzB,SAASC,EAAaD,GAGlB,GAAIP,EAGAS,WAAWD,EAAc,EAAGD,OACzB,CACH,IAAIG,EAAOX,EAAcQ,GACzB,GAAIG,EAAM,CACNV,GAAwB,EACxB,KAjCZ,SAAaU,GACT,IAAIC,EAAWD,EAAKC,SAChBC,EAAOF,EAAKE,KAChB,OAAQA,EAAKC,QACb,KAAK,EACDF,IACA,MACJ,KAAK,EACDA,EAASC,EAAK,IACd,MACJ,KAAK,EACDD,EAASC,EAAK,GAAIA,EAAK,IACvB,MACJ,KAAK,EACDD,EAASC,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAChC,MACJ,QACID,EAASG,MAAMC,EAAWH,IAiBlBI,CAAIN,GACN,QACEJ,EAAeC,GACfP,GAAwB,KA2BxC,SAASiB,IAMiB,SAAlBC,EAA2BC,GACvBA,EAAMC,SAAWC,GACK,iBAAfF,EAAMG,MACyB,IAAtCH,EAAMG,KAAKC,QAAQC,IACnBhB,GAAcW,EAAMG,KAAKG,MAAMD,EAAcX,SALrD,IAAIW,EAAgB,gBAAkBE,KAAKC,SAAW,IASlDN,EAAOO,iBACPP,EAAOO,iBAAiB,UAAWV,GAAiB,GAEpDG,EAAOQ,YAAY,YAAaX,GAGpChB,EAAoB,SAASK,GACzBc,EAAOS,YAAYN,EAAgBjB,EAAQ,MApH/Cc,EAAOU,eAIPjC,EAAa,EAEbE,IADAD,EAAgB,IAEhBE,EAAMoB,EAAOW,SAqJjB3B,GADIA,EAAW4B,OAAOC,gBAAkBD,OAAOC,eAAeb,KACvChB,EAASI,WAAaJ,EAAWgB,EAGf,qBAArC,GAAGc,SAASC,KAAKf,EAAOgB,SApFxBnC,EAAoB,SAASK,GACzB8B,EAAQC,SAAS,WAAc9B,EAAaD,OAIpD,WAGI,GAAIc,EAAOS,cAAgBT,EAAOkB,cAAe,CAC7C,IAAIC,GAA4B,EAC5BC,EAAepB,EAAOqB,UAM1B,OALArB,EAAOqB,UAAY,WACfF,GAA4B,GAEhCnB,EAAOS,YAAY,GAAI,KACvBT,EAAOqB,UAAYD,EACZD,GAwEJG,GApCPzC,EAwCOmB,EAAOuB,iBA9CVxC,EAAU,IAAIwC,gBACVC,MAAMH,UAAY,SAASvB,GAE/BX,EADaW,EAAMG,OAIH,SAASf,GACzBH,EAAQ0C,MAAMhB,YAAYvB,KA2CvBN,GAAO,uBAAwBA,EAAI8C,cAAc,WAtCpD5C,EAAOF,EAAI+C,gBACK,SAASzC,GAGzB,IAAI0C,EAAShD,EAAI8C,cAAc,UAC/BE,EAAOC,mBAAqB,WACxB1C,EAAaD,GACb0C,EAAOC,mBAAqB,KAC5B/C,EAAKgD,YAAYF,GACjBA,EAAS,MAEb9C,EAAKiD,YAAYH,KAKD,SAAS1C,GACzBE,WAAWD,EAAc,EAAGD,IAehCU,IAeJZ,EAAS0B,aA1KT,SAAsBpB,GAEI,mBAAbA,IACTA,EAAW,IAAI0C,SAAS,GAAK1C,IAI/B,IADA,IAAIC,EAAO,IAAI0C,MAAMC,UAAU1C,OAAS,GAC/B2C,EAAI,EAAGA,EAAI5C,EAAKC,OAAQ2C,IAC7B5C,EAAK4C,GAAKD,UAAUC,EAAI,GAM5B,OAFAzD,EAAcD,GADH,CAAEa,SAAUA,EAAUC,KAAMA,GAEvCV,EAAkBJ,GACXA,KA6JTO,EAASC,eAAiBA,GAxL9B,CAyLkB,oBAATmD,UAAyC,IAAXpC,EAAyBqC,KAAOrC,EAASoC,O","file":"js/npm.setimmediate10.js","sourcesContent":["(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6â€“8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n"],"sourceRoot":""}